#!/bin/bash

#=======================================================================
#
# chpathn.flib <Functions for the chpathn.bash script.>
# Copyright (C) 2012  Marcelo Javier Auquer
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# REQUIREMENTS: upvars.bash
#         BUGS: --
#        NOTES: Any suggestion is welcomed at auq..r@gmail.com (fill in
#               the dots).
#

source ~/code/bash/chpathn/upvars/upvars.bash

#===  FUNCTION =========================================================
#
#        NAME: asciivowels
#
#       USAGE: asciivowels PATHNAME PATTERN VARNAME
#
# DESCRIPTION: Use the expanded value of PATTERN (the parent_matcher) to
#              match a beggining substring (a prefix) of the expanded
#              value of PATHNAME (pathname) to be preserved of further
#              editing of this function. Replace in the trailing
#              substring not matched by the parent_matcher (the suffix)
#              every character of a non-ascii vowel with his matching
#              ascii vowel character. Store the resulting string in the
#              caller's variable VARNAME.
#
#  PARAMETERS: PATHNAME (A string).
#              PATTERN  (A word subject of tilde expansion, parameter
#                        expansion, command substitution and arithmetic
#                        substitution). 
#              VARNAME  (A variable name).
#
asciivowels () {
	local suffix="${1#$2}"
	local prefix="${1%/*}/"
	suffix=${suffix//â/a}
	suffix=${suffix//à/a}
	suffix=${suffix//á/a}
	suffix=${suffix//ä/a}
	suffix=${suffix//ê/e}
	suffix=${suffix//è/e}
	suffix=${suffix//é/e}
	suffix=${suffix//ë/e}
	suffix=${suffix//î/i}
	suffix=${suffix//ì/i}
	suffix=${suffix//í/i}
	suffix=${suffix//ï/i}
	suffix=${suffix//ô/o}
	suffix=${suffix//ò/o}
	suffix=${suffix//ó/o}
	suffix=${suffix//ö/o}
	suffix=${suffix//û/u}
	suffix=${suffix//ù/u}
	suffix=${suffix//ú/u}
	suffix=${suffix//ü/u}
	local $3 && upvar $3 "$prefix$suffix"
}

#===  FUNCTION =========================================================
#
#        NAME: noblank
#       USAGE: noblank PATHNAME PATTERN VARNAME
#
# DESCRIPTION: Use the expanded value of PATTERN (the parent_matcher) to
#              match a beggining substring (a prefix) of the expanded
#              value of PATHNAME (pathname) to be preserved of further
#              editing of this function. Replace in the trailing
#              substring not matched by the parent_matcher (the suffix)
#              every blank character with an undescore. Store the
#              resulting string in the caller's variable VARNAME.
#
#  PARAMETERS: PATHNAME (A string).
#              PATTERN  (A word subject of tilde expansion, parameter
#                        expansion, command substitution and arithmetic
#                        substitution). 
#              VARNAME  (A variable name).
#
noblank () {
	local suffix="${1#$2}"
	local prefix="${1%/*}/"
	suffix="${suffix//[[:blank:]]/_}"
	local $3 && upvar $3 "$prefix$suffix"
}

#===  FUNCTION =========================================================
#
#        NAME: nospecial
#
#       USAGE: nospecial PATHNAME PATTERN VARNAME
#
# DESCRIPTION: Use the expanded value of PATTERN (the parent_matcher) to
#              match a beggining substring (a prefix) of the expanded
#              value of PATHNAME (pathname) to be preserved of further
#              editing of this function. Replace in the trailing
#              substring not matched by the parent_matcher (the suffix)
#              every character with a dash, unless it is a dot, an
#              underscore or an alphanumeric character. Store the
#              resulting string in the caller's variable VARNAME.
#
#  PARAMETERS: PATHNAME (A string).
#              PATTERN  (A word subject of tilde expansion, parameter
#                        expansion, command substitution and arithmetic
#                        substitution). 
#              VARNAME  (A variable name).
#
nospecial () {
	local suffix="${1#$2}"
	local prefix="${1%/*}/"
	suffix="${suffix//[^[:word:].]/-}"
	local $3 && upvar $3 "$prefix$suffix"
	trim "$new_name" "$2" "new_name"
}

#===  FUNCTION =========================================================
#
#        NAME: nocntrl
#
#       USAGE: nocntrl PATHNAME PATTERN VARNAME
#
# DESCRIPTION: Use the expanded value of PATTERN (the parent_matcher) to
#              match a beggining substring (a prefix) of the expanded
#              value of PATHNAME (pathname) to be preserved of further
#              editing of this function. Remove of the trailing
#              substring not matched by the parent_matcher (the suffix)
#              every control character. Store the resulting string in
#              the caller's variable VARNAME.
#
#  PARAMETERS: PATHNAME (A string).
#              PATTERN  (A word subject of tilde expansion, parameter
#                        expansion, command substitution and arithmetic
#                        substitution). 
#              VARNAME  (A variable name).
#
nocntrl () {
	local suffix="${1#$2}"
	local prefix="${1%/*}/"
	suffix="${suffix//[[:cntrl:]]}"
	local $3 && upvar $3 "$prefix$suffix"
}

#===  FUNCTION =========================================================
#
#        NAME: norep
#
#       USAGE: norep PATHNAME PATTERN VARNAME
#
# DESCRIPTION: Use the expanded value of PATTERN (the parent_matcher) to
#              match a beggining substring (a prefix) of the expanded
#              value of PATHNAME (pathname) to be preserved of further
#              editing of this function. Remove of the trailing
#              substring not matched by the parent_matcher (the suffix)
#              every sequence of dashes (or underscores). Leave only one
#              character in that place. Store the resulting string in
#              the caller's variable VARNAME.
#
#  PARAMETERS: PATHNAME (A string).
#              PATTERN  (A word subject of tilde expansion, parameter
#                        expansion, command substitution and arithmetic
#                        substitution). 
#              VARNAME  (A variable name).
#
norep () {
	local suffix="${1#$2}"
	local prefix="${1%/*}/"
	suffix="$(echo $suffix | tr -s [-_])"
	local $3 && upvar $3 "$prefix$suffix"
	trim "$new_name" "$2" "new_name"

}

#===  FUNCTION =========================================================
#
#        NAME: portable
#
#       USAGE: portable PATHNAME PATTERN VARNAME
#
# DESCRIPTION: Equivalent to:
#              {
#              nocntrl PATHNAME PATTERN VARNAME
#              trim PATHNAME PATTERN VARNAME
#              noblank PATHNAME PATTERN VARNAME
#              asciivowels PATHNAME PATTERN VARNAME
#              nospecial PATHNAME PATTERN VARNAME
#              norep PATHNAME PATTERN VARNAME
#              trim PATHNAME PATTERN VARNAME
#              }
#
#  PARAMETERS: PATHNAME (A string).
#              PATTERN  (A word subject of tilde expansion, parameter
#                        expansion, command substitution and arithmetic
#                        substitution). 
#              VARNAME  (A variable name).
#
portable () {
	local suffix="${1#$2}"
	local prefix="${1%/*}/"
	suffix="${suffix//[[:cntrl:]]}"
	suffix="${suffix##+([-[[:space:]])}"
	suffix="${suffix%%+([[:space:]])}"
	suffix="${suffix//[[:blank:]]/_}"
	suffix=${suffix//â/a}
	suffix=${suffix//à/a}
	suffix=${suffix//á/a}
	suffix=${suffix//ä/a}
	suffix=${suffix//ê/e}
	suffix=${suffix//è/e}
	suffix=${suffix//é/e}
	suffix=${suffix//ë/e}
	suffix=${suffix//î/i}
	suffix=${suffix//ì/i}
	suffix=${suffix//í/i}
	suffix=${suffix//ï/i}
	suffix=${suffix//ô/o}
	suffix=${suffix//ò/o}
	suffix=${suffix//ó/o}
	suffix=${suffix//ö/o}
	suffix=${suffix//û/u}
	suffix=${suffix//ù/u}
	suffix=${suffix//ú/u}
	suffix=${suffix//ü/u}
	suffix="${suffix//[^[:word:].]/-}"
	suffix="$(echo $suffix | tr -s [-_])"
	suffix="${suffix##+([-[[:space:]])}"
	suffix="${suffix%%+([[:space:]])}"
	local $3 && upvar $3 "$prefix$suffix"
}

#===  FUNCTION =========================================================
#
#        NAME: trim
#
#       USAGE: trim PATHNAME PATTERN VARNAME
#
# DESCRIPTION: Use the expanded value of PATTERN (the parent_matcher) to
#              match a beggining substring (a prefix) of the expanded
#              value of PATHNAME (pathname) to be preserved of further
#              editing of this function. Remove of the trailing
#              substring not matched by the parent_matcher (the suffix)
#              every sequence of dashes (or underscores). Remove spaces
#              and dashes at the beggining of the suffix and spaces at
#              the end of it. Store the resulting string in the caller's
#              variable VARNAME.
#
#  PARAMETERS: PATHNAME (A string).
#              PATTERN  (A word subject of tilde expansion, parameter
#                        expansion, command substitution and arithmetic
#                        substitution). 
#              VARNAME  (A variable name).
#
trim () {
	local suffix="${1#$2}"
	local prefix="${1%/*}/"
	suffix="${suffix##+([-[[:space:]])}"
	suffix="${suffix%%+([[:space:]])}"
	local $3 && upvar $3 "$prefix$suffix"
}

#===  FUNCTION =========================================================
#
#        NAME: is_ancestor
#
#       USAGE: is_ancestor PATHNAME1 PATHNAME2
#
# DESCRIPTION: Consider PATHNAME1 and PATHNAME2 as the root directories
#              of two unix filesystem hierararchy trees, T1 and T2.
#              Return 0 if T2 is a subtree of T1.
#
#  PARAMETERS: PATHNAME1 (A string representing a unix pathname).
#              PATHNAME2 (A string representing a unix pathname).
#
#=======================================================================
is_ancestor () {
	OLD_IFS=$IFS
	IFS="$(printf '\n\t')"
	{
		[[ "$#" -ne 2 ]] && cat <<- EOF
		Error: function is_ancestor requires two arguments.
		EOF
	} && exit 1
	local pathname1="$(readlink -f "$1")"
	local pathname2="$(readlink -f "$2")"
	([[ "$pathname2" =~ ${pathname1}/.* ]] && return 0) || return 1
	IFS=$OLD_IFS
}

#===  FUNCTION =========================================================
#
#        NAME: get_outputdir
#
#       USAGE: get_outputdir VARNAME STRING PATHNAME PATH...
#
# DESCRIPTION: If STRING has the format of a unix filesystem absolute
#              pathname, assign this string to the caller's variable
#              VARNAME. Otherwise, consider PATHNAME and PATH... as
#              being unix filesystem formated pathnames. Find out which
#              of the pathnames listed in PATH... is an ancestor of
#              PATHNAME. Build a pathname string whose prefix is the
#              founded pathname ancestor and whose suffix is STRING.
#              Assign the resulting string to the caller's variable
#              VARNAME. 
#
#  PARAMETERS: VARNAME  (A string representing a variable name inside the
#                        caller's scope).
#              STRING   (A string).
#              PATHNAME (A string representing a unix pathname).
#              PATH...  (A listing of unix filesystem formated
#                        pathnames).
#
#=======================================================================
get_outputdir () {
	{
		[[ "$#" -lt 4 ]] && cat <<- EOF
		Error: function get_outputdir requires at least four arguments.
		EOF
	} && exit 1
	local output_dir="$1"
	local output_opt="$2"
	local pathname="$3"
	shift 3
	[[ "$output_opt" =~ /.* ]] && local output=$output_opt
	[[ ! "$output_opt" =~ /.* ]] && 
		for path in "$@"; do
			if is_ancestor "$path" "$pathname"; then
				output="$path"/"$output_opt"
				break
			fi
		done
	local $output_dir && upvar $output_dir "$output"
}

#===  FUNCTION =========================================================
#
#        NAME: get_parentmatcher
#
#       USAGE: get_parentmatcher VARNAME PATHNAME
#
# DESCRIPTION: Consider PATHNAME as a string representing a unix
#              filesystem pathname. Build a matching pattern just as in
#              pathname expansion which matches the pathname of
#              PATHNAME's parent directory. Assign the resulting pattern
#              to the caller's variable VARNAME.
#
#  PARAMETERS: VARNAME  (A string representing a variable name inside the
#                        caller's scope).
#              PATHNAME (A string representing a unix pathname).
#
#=======================================================================
get_parentmatcher () {
	{
		[[ "$#" -ne 2 ]] && cat <<- EOF
		Error: function get_parentmatcher requires one argument.
		EOF
	} && exit 1
	local parent_matcher=
	local file="$2"
	slashes="${file//[^\/]}"
	depth=${#slashes}	
	
	#--------------------------------------------------------------
	# Check for error in pathname (all slashes?)
	#--------------------------------------------------------------

	if [ ${#file} -eq ${#slashes} ]; then
		echo "Error: file $file skipped." 2>&1
		parent_matcher=
		continue
	fi
	
	#--------------------------------------------------------------
	# Build the pattern matcher.
	#--------------------------------------------------------------

	# Is an absolute path?
	if [[ $file =~ ^/.* ]]
	then
		parent_matcher="/"
		depth=$(($depth-1))
		subdir_matcher="[^/]*/"
		while [ $depth -ne 0 ]; do
			parent_matcher="$parent_matcher$subdir_matcher"
			depth=$(($depth-1))
		done
		local $1 && upvar $1 $parent_matcher
	else
		subdir_matcher="[^/]*/"
		while [ $depth -ne 0 ]; do
			parent_matcher="$parent_matcher$subdir_matcher"
			depth=$(($depth-1))
		done
		local $1 && upvar $1 $parent_matcher
	fi
}

#===  FUNCTION =========================================================
#
#        NAME: rm_subtrees
#
#       USAGE: rm_subtrees VARNAME PATH...
#
# DESCRIPTION: Consider PATH... as a list of unix filesystem pathnames.
#              Delete from PATH... every pathname which has an ancestor
#              pathname in that list. Store the resulting list in an
#              array pointed by the caller's VARNAME variable.
#
#  PARAMETERS: VARNAME (A string representing a variable name inside the
#                       caller's scope).
#              PATH... (A list of strings representing unix filesystem
#                       pathnames).
#
#=======================================================================
rm_subtrees () {
	OLD_IFS=$IFS
	IFS="$(printf '\n\t')"
	{
		[[ "$#" -lt 3 ]] && cat <<- EOF
		Error: function rm_substrees requires three or more \
arguments.
		EOF
	} && exit 1
	local varname=$1 && shift 1
	paths=($@)
	for (( f=0 ; f < ${#paths[*]}; f++ )); do
		[ ! paths[f] ] && continue
		for (( g=f+1 ; g < ${#paths[*]}; g++ )); do
			[ ! paths[g] ] && continue
			if [ ${#paths[f]} -le ${#paths[g]} ]; then
				if is_ancestor ${paths[f]} ${paths[g]}
				then
					unset paths[$g]
				fi
			else
				if is_ancestor ${paths[g]} ${paths[f]}
				then
					unset paths[$f]
				fi
			fi
		done
	done
	upvar $varname "${paths[@]}"
	IFS=$OLD_IFS
}
