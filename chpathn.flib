#!/bin/bash

# chpathn.flib <Functions for the chpathn.bash script.>
# Copyright (C) 2012  Marcelo Javier Auquer
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# REQUIREMENTS: upvars.bash
#         BUGS: --
#        NOTES: Any suggestion is welcomed at auq..r@gmail.com (fill in
#               the dots).

source ~/code/bash/chpathn/upvars/upvars.bash
source ~/code/bash/chpathn/pathname/pathname.flib

asciivowels () {

#       USAGE: asciivowels PATHNAME PATTERN VARNAME
#
# DESCRIPTION: Use the expanded value of PATTERN (the parent_matcher) to
#              match a beggining substring (a prefix) of the expanded
#              value of PATHNAME (pathname) to be preserved of further
#              editing of this function. Replace in the trailing
#              substring not matched by the parent_matcher (the suffix)
#              every character of a non-ascii vowel with his matching
#              ascii vowel character. Store the resulting string in the
#              caller's variable VARNAME.
#
#  PARAMETERS: PATHNAME (A string).
#              PATTERN  (A word subject of tilde expansion, parameter
#                        expansion, command substitution and arithmetic
#                        substitution). 
#              VARNAME  (A variable name).

	local suffix="${1#$2}"
	local prefix="${1%/*}/"
	suffix=${suffix//â/a}
	suffix=${suffix//à/a}
	suffix=${suffix//á/a}
	suffix=${suffix//ä/a}
	suffix=${suffix//ê/e}
	suffix=${suffix//è/e}
	suffix=${suffix//é/e}
	suffix=${suffix//ë/e}
	suffix=${suffix//î/i}
	suffix=${suffix//ì/i}
	suffix=${suffix//í/i}
	suffix=${suffix//ï/i}
	suffix=${suffix//ô/o}
	suffix=${suffix//ò/o}
	suffix=${suffix//ó/o}
	suffix=${suffix//ö/o}
	suffix=${suffix//û/u}
	suffix=${suffix//ù/u}
	suffix=${suffix//ú/u}
	suffix=${suffix//ü/u}
	local $3 && upvar $3 "$prefix$suffix"
}

noblank () {

#       USAGE: noblank PATHNAME PATTERN VARNAME
#
# DESCRIPTION: Use the expanded value of PATTERN (the parent_matcher) to
#              match a beggining substring (a prefix) of the expanded
#              value of PATHNAME (pathname) to be preserved of further
#              editing of this function. Replace in the trailing
#              substring not matched by the parent_matcher (the suffix)
#              every blank character with an undescore. Store the
#              resulting string in the caller's variable VARNAME.
#
#  PARAMETERS: PATHNAME (A string).
#              PATTERN  (A word subject of tilde expansion, parameter
#                        expansion, command substitution and arithmetic
#                        substitution). 
#              VARNAME  (A variable name).

	local suffix="${1#$2}"
	local prefix="${1%/*}/"
	suffix="${suffix//[[:blank:]]/_}"
	local $3 && upvar $3 "$prefix$suffix"
}

nospecial () {

#       USAGE: nospecial PATHNAME PATTERN VARNAME
#
# DESCRIPTION: Use the expanded value of PATTERN (the parent_matcher) to
#              match a beggining substring (a prefix) of the expanded
#              value of PATHNAME (pathname) to be preserved of further
#              editing of this function. Replace in the trailing
#              substring not matched by the parent_matcher (the suffix)
#              every character with a dash, unless it is a plus, dot, an
#              underscore or an alphanumeric character. Store the
#              resulting string in the caller's variable VARNAME.
#
#  PARAMETERS: PATHNAME (A string).
#              PATTERN  (A word subject of tilde expansion, parameter
#                        expansion, command substitution and arithmetic
#                        substitution). 
#              VARNAME  (A variable name).

	local suffix="${1#$2}"
	local prefix="${1%/*}/"
	suffix="${suffix//[^[:word:].+]/-}"
	local $3 && upvar $3 "$prefix$suffix"
	trim "$new_name" "$2" "new_name"
}

nocntrl () {

#       USAGE: nocntrl PATHNAME PATTERN VARNAME
#
# DESCRIPTION: Use the expanded value of PATTERN (the parent_matcher) to
#              match a beggining substring (a prefix) of the expanded
#              value of PATHNAME (pathname) to be preserved of further
#              editing of this function. Remove of the trailing
#              substring not matched by the parent_matcher (the suffix)
#              every control character. Store the resulting string in
#              the caller's variable VARNAME.
#
#  PARAMETERS: PATHNAME (A string).
#              PATTERN  (A word subject of tilde expansion, parameter
#                        expansion, command substitution and arithmetic
#                        substitution). 
#              VARNAME  (A variable name).

	local suffix="${1#$2}"
	local prefix="${1%/*}/"
	suffix="${suffix//[[:cntrl:]]}"
	local $3 && upvar $3 "$prefix$suffix"
}

norep () {

#       USAGE: norep PATHNAME PATTERN VARNAME
#
# DESCRIPTION: Use the expanded value of PATTERN (the parent_matcher) to
#              match a beggining substring (a prefix) of the expanded
#              value of PATHNAME (pathname) to be preserved of further
#              editing of this function. Remove of the trailing
#              substring not matched by the parent_matcher (the suffix)
#              every sequence of dashes (or underscores). Leave only one
#              character in that place. Store the resulting string in
#              the caller's variable VARNAME.
#
#  PARAMETERS: PATHNAME (A string).
#              PATTERN  (A word subject of tilde expansion, parameter
#                        expansion, command substitution and arithmetic
#                        substitution). 
#              VARNAME  (A variable name).

	local suffix="${1#$2}"
	local prefix="${1%/*}/"
	suffix="$(echo $suffix | tr -s [-_])"
	local $3 && upvar $3 "$prefix$suffix"
	trim "$new_name" "$2" "new_name"

}

portable () {

#       USAGE: portable PATHNAME PATTERN VARNAME
#
# DESCRIPTION: Equivalent to:
#              {
#              nocntrl PATHNAME PATTERN VARNAME
#              trim PATHNAME PATTERN VARNAME
#              noblank PATHNAME PATTERN VARNAME
#              asciivowels PATHNAME PATTERN VARNAME
#              nospecial PATHNAME PATTERN VARNAME
#              norep PATHNAME PATTERN VARNAME
#              trim PATHNAME PATTERN VARNAME
#              }
#
#  PARAMETERS: PATHNAME (A string).
#              PATTERN  (A word subject of tilde expansion, parameter
#                        expansion, command substitution and arithmetic
#                        substitution). 
#              VARNAME  (A variable name).

	local suffix="${1#$2}"
	local prefix="${1%/*}/"
	suffix="${suffix//[[:cntrl:]]}"
	suffix="${suffix##+([-[[:space:]])}"
	suffix="${suffix%%+([[:space:]])}"
	suffix="${suffix//[[:blank:]]/_}"
	suffix=${suffix//â/a}
	suffix=${suffix//à/a}
	suffix=${suffix//á/a}
	suffix=${suffix//ä/a}
	suffix=${suffix//ê/e}
	suffix=${suffix//è/e}
	suffix=${suffix//é/e}
	suffix=${suffix//ë/e}
	suffix=${suffix//î/i}
	suffix=${suffix//ì/i}
	suffix=${suffix//í/i}
	suffix=${suffix//ï/i}
	suffix=${suffix//ô/o}
	suffix=${suffix//ò/o}
	suffix=${suffix//ó/o}
	suffix=${suffix//ö/o}
	suffix=${suffix//û/u}
	suffix=${suffix//ù/u}
	suffix=${suffix//ú/u}
	suffix=${suffix//ü/u}
	suffix="${suffix//[^[:word:].+]/-}"
	suffix="$(echo $suffix | tr -s [-_])"
	suffix="${suffix##+([-[[:space:]])}"
	suffix="${suffix%%+([[:space:]])}"
	local $3 && upvar $3 "$prefix$suffix"
}

trim () {

#       USAGE: trim PATHNAME PATTERN VARNAME
#
# DESCRIPTION: Use the expanded value of PATTERN (the parent_matcher) to
#              match a beggining substring (a prefix) of the expanded
#              value of PATHNAME (pathname) to be preserved of further
#              editing of this function. Remove of the trailing
#              substring not matched by the parent_matcher (the suffix)
#              every sequence of dashes (or underscores). Remove spaces
#              and dashes at the beggining of the suffix and spaces at
#              the end of it. Store the resulting string in the caller's
#              variable VARNAME.
#
#  PARAMETERS: PATHNAME (A string).
#              PATTERN  (A word subject of tilde expansion, parameter
#                        expansion, command substitution and arithmetic
#                        substitution). 
#              VARNAME  (A variable name).

	local suffix="${1#$2}"
	local prefix="${1%/*}/"
	suffix="${suffix##+([-[[:space:]])}"
	suffix="${suffix%%+([[:space:]])}"
	local $3 && upvar $3 "$prefix$suffix"
}

get_outputdir () {

#       USAGE: get_outputdir VARNAME STRING PATHNAME PATH...
#
# DESCRIPTION: If STRING has the format of a unix filesystem absolute
#              pathname, assign this string to the caller's variable
#              VARNAME. Otherwise, consider PATHNAME and PATH... as
#              being unix filesystem formated pathnames. Find out which
#              of the pathnames listed in PATH... is an ancestor of
#              PATHNAME. Build a pathname string whose prefix is the
#              found pathname ancestor and whose suffix is STRING.
#              Assign the resulting string to the caller's variable
#              VARNAME. 
#
#  PARAMETERS: VARNAME  (A string representing a variable name inside the
#                        caller's scope).
#              STRING   (A string).
#              PATHNAME (A string representing a unix pathname).
#              PATH...  (A listing of unix filesystem formated
#                        pathnames).

	{
	[[ "$#" -lt 4 ]] && cat <<- EOF
	Error: function get_outputdir requires at least four arguments.
	EOF
	} && exit 1
	local output_dir="$1"
	local output_opt="$2"
	local pathname="$3"
	shift 3
	[[ "$output_opt" =~ /.* ]] && local output=$output_opt
	[[ ! "$output_opt" =~ /.* ]] && 
		for path in "$@"
		do
			if is_ancestor "$path" "$pathname"
			then
				output="$path"/"$output_opt"
				break
			fi
		done
	local $output_dir && upvar $output_dir "$output"
}

get_parentmatcher () {

#       USAGE: get_parentmatcher VARNAME PATHNAME
#
# DESCRIPTION: Consider PATHNAME as a string representing a unix
#              filesystem pathname. Build a matching pattern just as in
#              pathname expansion which matches the pathname of
#              PATHNAME's parent directory. Assign the resulting pattern
#              to the caller's variable VARNAME.
#
#  PARAMETERS: VARNAME  A string representing a variable name inside the
#                       caller's scope.
#              PATHNAME A string representing a unix pathname.

	{
	[[ "$#" -ne 2 ]] && cat <<- EOF
	Error: function get_parentmatcher requires two arguments.
	EOF
	} && return 1
	local pattern
	local slashes="${2//[^\/]}"
	local depth=${#slashes}	

	# Build the pattern matcher.
	if [[ $2 =~ ^/.* ]] # Is an absolute path?
	then
		pattern="/"
		depth=$(($depth-1))
		subdir_matcher="[^/]*/"
		while [ $depth -ne 0 ]
		do
			pattern="$pattern$subdir_matcher"
			depth=$(($depth-1))
		done
		local $1 && upvar $1 $pattern
	else
		subdir_matcher="[^/]*/"
		while [ $depth -ne 0 ]
		do
			pattern="$pattern$subdir_matcher"
			depth=$(($depth-1))
		done
		local $1 && upvar $1 $pattern
	fi
}

read_topdirs () {

#       USAGE: read_topdirs VARNAME LOG
#
# DESCRIPTION: Read the LOG and make a list of the directories where to
#              find the files and directories processed in the
#              corresponding session of the chpathn script. Store that
#              list in the caller's variable VARNAME.
#
#  PARAMETERS: VARNAME  A string representing a variable name inside the
#                       caller's scope.
#              LOG      The output of the command chpathn --verbose in
#                       the form of multiple words.

	local -a log=( ${@:2} )
	local -a dirs
	local copy=false
	for (( i=0; i<${#log[@]}; i++))
	do
		[[ ${log[i-2]} == Top ]] &&
		[[ ${log[i-1]} == directories: ]] &&
		copy=true
		[[ $copy == true ]] && dirs+=( ${log[i]} )
	done
	local $1 && upvars -a${#dirs[@]} $1 ${dirs[@]}
}
